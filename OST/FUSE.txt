
A file system (file system) is means to organize data expected to be retained after a program terminates by providing procedures to store, 
retrieve and update data, as well as manage the available space on the device(s) which contain it. A file system organizes data in an efficient 
manner and is tuned to the specific characteristics of the device. 
There is usually a tight coupling between the operating system and the file system. Some file systems provide mechanisms to control access to the data and metadata. 
Insuring reliability is a major responsibility of a file system. Some file systems provide a means for multiple programs to update data in the same file nearly at the same time. 
Without a file system programs would not be able to access data by file name or directory and would need to be able to directly access data regions on a storage device.


File System in User Space (FUSE) is an operating system mechanism for Unix-like computer operating systems that lets non-privileged users create their own file systems without editing kernel code. This is achieved by running file system code in user space while the FUSE module provides only a "bridge" to the actual kernel interfaces.
They act as a view or translation of an existing file system or storage device. In principle, any resource available to a FUSE implementation can be exported as a file system. 

FUSE is made up of three main parts:
A kernel file system modules
A userspace library
A mount/unmount program


sudo apt-get install fuse
sudo apt-get install libfuse-dev
mkdir fuse
cd fuse
gedit hello.c


<hello.c>

#define FUSE_USE_VERSION 26 
#include <fuse.h>
#include <stdio.h> 
#include <string.h> 
#include <stdlib.h> 
#include <errno.h>
#include <fcntl.h>
static const char *hello_str = "Hello World!\n";
static const char *hello_path = "/hello";
static int hello_getattr(const char *path, struct stat *stbuf)

{
int res = 0;
memset(stbuf, 0, sizeof(struct stat)); 
if(strcmp(path, "/") == 0) {
stbuf->st_mode = S_IFDIR | 0755; 
stbuf->st_nlink = 2;
}

else if(strcmp(path, hello_path) == 0) { stbuf->st_mode = S_IFREG | 0444;
stbuf->st_nlink = 1;
stbuf->st_size = strlen(hello_str);
}

else
res = -ENOENT;
return res;
}
static int hello_readdir(const char *path, void *buf, fuse_fill_dir_t filler,off_t
offset, struct fuse_file_info *fi)
{
(void) offset;
(void) fi;
if(strcmp(path, "/") != 0) return -ENOENT;
filler(buf, ".", NULL, 0);
filler(buf, "..", NULL, 0);
filler(buf, hello_path + 1, NULL, 0);
return 0;
}
static int hello_open(const char *path, struct fuse_file_info *fi)
{
if(strcmp(path, hello_path) != 0) 
return -ENOENT;
if((fi->flags & 3) != O_RDONLY) 
return -EACCES;
return 0;

}

static int hello_read(const char *path, char *buf, size_t size, off_t offset,
struct fuse_file_info *fi)
{
(void) fi; size_t len;
if(strcmp(path, hello_path) != 0) return -ENOENT;
len = strlen(hello_str); 
if (offset < len) {
if (offset + size > len) 
      size = len - offset;
memcpy(buf, hello_str + offset, size);
} else size = 0;
return size;
}
static struct fuse_operations hello_oper = {
.getattr = hello_getattr,
.readdir = hello_readdir,
.open = hello_open,
.read = hello_read,
};
int main(int argc, char *argv[])
{
return fuse_main(argc, argv, &hello_oper, NULL);
}



gcc -Wall 'pkg-config fuse --cflags --libs' hello.c -o hello
sudo bash
mkdir tmp
./hello tmp/
ls tmp/
cat tmp/hello Hello World!
unmount tmp
